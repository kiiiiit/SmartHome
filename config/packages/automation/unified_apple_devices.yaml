# Apple TV (–µ—Å–ª–∏ –µ—Å—Ç—å)
apple_tv:
  - host: !secret apple_tv_ip # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–∫—Ä–µ—Ç
    login_id: !secret apple_tv_login_id
    name: "Apple TV" # –£–∫–æ—Ä–æ—Ç–∏–ª –∏–º—è, –±—É–¥–µ—Ç climate.apple_tv

# AirPlay (–µ—Å–ª–∏ –µ—Å—Ç—å)
media_player:
  - platform: airplay
    host: !secret airplay_ip # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–∫—Ä–µ—Ç
    name: "Mood Player"

# Shell commands (–¥–ª—è MacBook)
shell_command:
  macbook_sleep: "ssh !secret macbook_user@!secret macbook_ip 'pmset sleepnow'"
  macbook_wake: "ssh !secret macbook_user@!secret macbook_ip 'caffeinate -u -t 1'"

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è unified_apple_devices.yaml
automation:
  - alias: "iPhone - Unified Control"
    description: "–ï–¥–∏–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ iPhone"
    trigger:
      - platform: state
        entity_id: device_tracker.iphone_user1
        to: 'home'
      - platform: state
        entity_id: device_tracker.iphone_user1
        to: 'not_home'
        for: "00:15:00"
      - platform: zone
        entity_id: device_tracker.iphone_user1
        zone: zone.approaching_home
        event: enter
      - platform: state
        entity_id: binary_sensor.low_battery_alert
        to: 'on'
    variables:
      trigger_entity: "{{ trigger.entity_id }}"
      action_type: >
        {% if trigger_entity == 'device_tracker.iphone_user1' and trigger.to_state.state == 'home' %}
          arriving
        {% elif trigger_entity == 'device_tracker.iphone_user1' and trigger.to_state.state == 'not_home' %}
          leaving
        {% elif trigger_entity == 'device_tracker.iphone_user1' and trigger.zone is defined and 'approaching_home' in trigger.zone %}
          approaching
        {% elif 'low_battery' in trigger_entity %}
          low_battery
        {% endif %}
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ action_type == 'arriving' }}"
            sequence:
              - service: script.activate_homekit_mode
                data:
                  mode: home
              - service: notify.mobile_app_iphone_user1
                data:
                  title: "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–π!"
                  message: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–º–∞: {{ states('sensor.home_average_temperature') }}¬∞C"
          - conditions:
              - condition: template
                value_template: "{{ action_type == 'leaving' }}"
            sequence:
              - service: script.activate_homekit_mode
                data:
                  mode: away
              - service: notify.mobile_app_iphone_user1
                data:
                  title: "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
                  message: "–î–æ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è"
          - conditions:
              - condition: template
                value_template: "{{ action_type == 'approaching' }}"
            sequence:
              - service: script.smart_set_temperature
                data:
                  mode: comfort
                  offset: 1
          - conditions:
              - condition: template
                value_template: "{{ action_type == 'low_battery' }}"
            sequence:
              - service: script.send_climate_notification
                data:
                  title: "üîã –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ Apple"
                  message: "–ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Apple. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ."
                  mobile: true

  # Apple Watch –∑–¥–æ—Ä–æ–≤—å–µ
  - alias: "Apple Watch - Health Climate Control"
    description: "–ö–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–¥–æ—Ä–æ–≤—å—è"
    trigger:
      - platform: state
        entity_id: sensor.apple_watch_heart_rate
        to: 'sleeping'
      - platform: numeric_state
        entity_id: sensor.apple_watch_heart_rate
        above: 100
    condition:
      - condition: state
        entity_id: device_tracker.iphone_user1
        state: 'home'
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.apple_watch_heart_rate
                state: 'sleeping'
            sequence:
              - service: script.activate_homekit_mode
                data:
                  mode: sleep
          - conditions:
              - condition: numeric_state
                entity_id: sensor.apple_watch_heart_rate
                above: 100
              - condition: numeric_state
                entity_id: sensor.home_average_temperature
                above: 25
            sequence:
              - service: script.smart_set_temperature
                data:
                  mode: comfort
                  offset: -2
              - service: script.send_climate_notification
                data:
                  title: "üè• –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–¥–æ—Ä–æ–≤—å—è"
                  message: "–°–Ω–∏–∂–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–æ–º–µ. –ü—É–ª—å—Å: {{ states('sensor.apple_watch_heart_rate') }}"
                  mobile: true

  # Apple —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  - alias: "Apple Devices - Activity Based Climate"
    description: "–ö–ª–∏–º–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Apple —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    trigger:
      - platform: state
        entity_id: media_player.apple_tv
        to: 'playing'
      - platform: state
        entity_id: media_player.mood_player
        to: 'playing'
      - platform: time
        at: "02:00:00"
    condition:
      - condition: state
        entity_id: binary_sensor.anyone_home
        state: 'on'
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: media_player.apple_tv
                state: 'playing'
              - condition: time
                after: "22:00:00"
                before: "06:00:00"
            sequence:
              - service: script.activate_homekit_mode
                data:
                  mode: sleep
          - conditions:
              - condition: state
                entity_id: media_player.mood_player
                state: 'playing'
            sequence:
              - service: script.smart_set_temperature
                data:
                  mode: comfort
                  offset: 1
          - conditions:
              - condition: template
                value_template: "{{ trigger.platform == 'time' }}"
              - condition: state
                entity_id: binary_sensor.anyone_home
                state: 'off'
            sequence:
              - service: shell_command.macbook_sleep
